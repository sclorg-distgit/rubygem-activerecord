diff --git a/lib/active_record/connection_adapters/postgresql/cast.rb b/lib/active_record/connection_adapters/postgresql/cast.rb
index a73f0ac..eac828b 100644
--- a/lib/active_record/connection_adapters/postgresql/cast.rb
+++ b/lib/active_record/connection_adapters/postgresql/cast.rb
@@ -138,12 +138,16 @@ module ActiveRecord
             end
           end
 
+          ARRAY_ESCAPE = "\\" * 2 * 2 # escape the backslash twice for PG arrays
+
           def quote_and_escape(value)
             case value
             when "NULL"
               value
             else
-              "\"#{value.gsub(/"/,"\\\"")}\""
+              value = value.gsub(/\\/, ARRAY_ESCAPE)
+              value.gsub!(/"/,"\\\"")
+              "\"#{value}\""
             end
           end
       end
diff --git a/test/cases/adapters/postgresql/datatype_test.rb b/test/cases/adapters/postgresql/datatype_test.rb
index ca1a613..51cb897 100644
--- a/test/cases/adapters/postgresql/datatype_test.rb
+++ b/test/cases/adapters/postgresql/datatype_test.rb
@@ -179,6 +179,14 @@ _SQL
      PostgresqlBitString, PostgresqlOid, PostgresqlTimestampWithZone, PostgresqlUUID].each(&:delete_all)
   end
 
+  def test_array_escaping
+    unknown = %(foo\\",bar,baz,\\)
+    nicknames = ["hello_#{unknown}"]
+    ar = PostgresqlArray.create!(nicknames: nicknames, id: 100)
+    ar.reload
+    assert_equal nicknames, ar.nicknames
+  end
+
   def test_data_type_of_array_types
     assert_equal :integer, @first_array.column_for_attribute(:commission_by_quarter).type
     assert_equal :text, @first_array.column_for_attribute(:nicknames).type
-- 
1.8.4.1


